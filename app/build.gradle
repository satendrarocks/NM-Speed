apply plugin: 'com.android.application'

android {
    signingConfigs {
        nmspeed {
            keyAlias 'nmspeed'
            keyPassword 'satendra'
            storeFile file('D:/Android/keystore/nmspeed.jks')
            storePassword 'satendra'
        }
    }
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    //noinspection GroovyAssignabilityCheck
    /*signingConfigs {
        ///myConfig
        nmspeed {
            keyAlias 'nmspeed'
            keyPassword 'satendra'
            storeFile file('D:/Android/keystore/nmspeed.jks')
            storePassword 'satendra'
        }
    }*/
    defaultConfig {
        applicationId "pawai.patne.nmspeed"
        targetSdkVersion 26
        minSdkVersion 14
        versionCode 17121402
        versionName '1.0.1'
        signingConfig signingConfigs.nmspeed
    }
    buildTypes {
        release {
            minifyEnabled false
            //shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.nmspeed
        }
    }
/*    applicationVariants.all { variant ->
        if (variant.buildType.name.equals("release")) {

            variant.outputs.each { output ->
                if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
//                    System.println("* output filename update : [${variant.buildType.name}]" +
//                            "[${variant.productFlavors[0].name}]" +
//                            "[${variant.productFlavors[0].applicationId}]"
//                    )

                    def file = output.outputFile
                    def d = new java.text.SimpleDateFormat("yyyyMMdd_HHmm").format(new Date())
                    def shortVersionName = defaultConfig.versionName.replaceAll('\\.', '')
                    def newName = "DataStats_${shortVersionName}_${d}.apk"
                    output.outputFile = new File(file.parent, newName)
                }
            }
        }
    }*/
    //def publish = project.tasks.create("publishAll")
    /* android.applicationVariants.all { variant ->

         if (variant.buildType.name.equals("release")) {

             variant.outputs.each { output ->
                 if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {

                     // publishXxxApk
                     def task = project.tasks.create("publish${variant.name.capitalize()}Apk", Copy)

                     task.from(output.outputFile)
                     task.into(deployTo)
                     task.dependsOn variant.assemble
                     publish.dependsOn task

                     // copyXxxMappingTxt
                     if (variant.buildType.minifyEnabled) {
                         def copyTask = project.tasks.create("copy${variant.name.capitalize()}MappingTxt", Copy)

                         // variant.outputFile = "build/outputs/apk/xxx.apk"
                         // from: "build/outputs/proguard/free/release/mapping.txt"
                         // into: "proguard-outputs/free-release-mapping.txt"

                         def flavorName = "";//variant.productFlavors[0].name
                         def buildTypeName = variant.buildType.name

                         copyTask.from(variant.getMappingFile())
                         copyTask.rename('(.*)', "${flavorName}-proguard-\$1")
                         copyTask.into(output.outputFile.parent + "/../../../proguard-outputs")

                         System.println("* copy mapping txt : [${flavorName}][${buildTypeName}]")

                         copyTask.dependsOn variant.assemble
                         task.dependsOn copyTask
                     }
                 }
             }
         }
     }*/
    productFlavors {
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:26.1.0'
}

/*
// load signing settings from gradle.properties
if (project.hasProperty('storeFile')) {
    android.signingConfigs.myConfig.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.myConfig.storePassword = storePassword
}
if (project.hasProperty('keyAlias')) {
    android.signingConfigs.myConfig.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.myConfig.keyPassword = keyPassword
}*/
